#!/bin/bash

# Heap space memory for JVM
defaultMinMem=500
defaultMaxMem=800

script_path=$(dirname "$0")
if [ "$CROSSDICS_PATH" = "" ];
then
	if [ -e "/usr/local/apertium-dixtools/dist/apertium-dixtools.jar" ]
	then
		CROSSDICS_PATH="/usr/local/apertium-dixtools"
	else
		CROSSDICS_PATH="$script_path"
	fi
fi
library="$CROSSDICS_PATH/dist/apertium-dixtools.jar"
java_options="-Xms${defaultMinMem}m -Xmx${defaultMaxMem}m -jar ${library}"

#echo $script_path

#
#	cross-param
#
function cross-param() {
   if [ $nparams -ge 7 ] && [ $nparams -le 8  ]
   then
        if [ "$8" == "default" ]
        then
            crossmodel="$CROSSDICS_PATH/schemas/cross-model.xml"
        else
            crossmodel="$8"
        fi

        if [ ! -e "$2" ]
	then
            echo "Problem loading monolingual dictionary A ($2)"
        fi
        if [ ! -e "$4" ]
	then
            echo "Problem loading bilingual dictionary AB ($4)"
        fi
        if [ ! -e "$6" ]
	then
            echo "Problem loading bilingual dictionary BC ($6)"
        fi
        if [ ! -e "$7" ]
	then
            echo "Problem loading monolingual dictionary C ($7)"
        fi
        if [ ! -e "$crossmodel" ]
	then
            echo "Problem loading cross-model ($8)"
        fi


   	java ${java_options} $task -noalign -monA $2 -bilAB $3 $4 -bilBC $5 $6 -monC $7 -cross-model $crossmodel
#   crossmodel="$CROSSDICS_PATH/schemas/cross-model.xml"
#	read i
#	   if [ $nparams -ge 8 ]
#   	then
#	   	crossmodel=$8
#   	fi
#	   echo "cross model: $crossmodel"
#   	if [ ! -d "dix" ]
#     	then
#             mkdir dix
#        fi
#               	   
#   	java ${java_options} $task -bilAB $3 $4 -bilBC $5 $6 -monA $2 -monC $7 -cross-model $crossmodel $9
   else
#	show_help2();
   	echo "Usage: apertium-dixtools cross-param <monA> <-r|-n> <bilAB> <-r|-n> <bilBC> <monC> crossmodel";
   	echo "";
   	echo "More information in http://wiki.apertium.org/wiki/Crossdics";
   	echo "";
   fi
}

#
#	cross
#
function cross() {
   if [ $nparams -ge 4 ]; then
   	if [ ! -d "dix" ]
     	then
             mkdir dix
        fi
#   	java ${java_options} $task $2 $3 $4
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
   	echo "Usage: apertium-dixtools cross -f <ling-resources.xml> <sl-tl>";
   	echo "";
   	echo "More information in http://wiki.apertium.org/wiki/Crossdics";
   	echo "";
   fi
}

#
#  format
#
function format() {
   if [ $nparams -ge 3 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
#      echo "Reading '$3'..."
#   	java ${java_options} $task $2 $3 $4 2> format.err
#      echo "Formatted dictonary: $4"
#      echo "Log file in 'format.err'"
   else
      echo "Usage: apertium-dixtools format <dic> <out>"
      echo "";
      echo "More information: http://wiki.apertium.org/wiki/Format_dictionaries";
      echo "";
   fi
}

#
#  merge-morph
#
function merge-morph() {
   if [ $nparams -ge 4 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
#      java ${java_options} $task -monA1 $2 -monA2 $3 -out $4 $5
      echo "Merged dictionary: $4"
   else
      echo "Usage: apertium-dixtools merge-morph <monA1> <monA2> <merged>"
      echo "";
      echo "More information: http://wiki.apertium.org/wiki/Merge_dictionaries";
      echo "";
   fi
}

#
#  merge-bil
#
function merge-bil() {
   if [ $nparams -eq 6 ]; then
	   echo "Bilingual 1: $3"
   	echo "mode: $2"
	   echo "Bilingual 2: $5"
   	echo "mode: $4"
      java ${java_options} $task -bilAB1 $2 $3 -bilAB2 $4 $5 -out $6
      echo "Merged: $6"
   else
   	echo "Usage: apertium-dixtools merge-bil <-n|-r> <bilAB1> <-n|-r> <bilAB2> <merged>";
   	echo "";
   fi
}

#
#  reverse-bil
#
function reverse-bil() {
   if [ $nparams -ge 3 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
#      echo "Reading '$2'..."
#   	java ${java_options} reverse $2 $3 2> reverse-bil.err      
   else
      echo "Usage: apertium-dixtools reverse-bil <dic> <out>";
      echo "";
      echo "More information: http://wiki.apertium.org/wiki/Reverse_a_dictionary";
      echo "";
   fi
}

#
#  sort
#
function sort() {
   if [ $nparams -ge 3 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
#      echo "Reading '$3' ($2)"
#      java ${java_options} $task $2 $3 $4
#      echo "Sorted: $4"
   else
      echo "Usage: apertium-dixtools sort [-group <symbol list>] [-right] [-ignorecase] <dic.dix> <out.dix>";
      echo "";
      echo "";
      echo "  -ignorecase ignore case when sorting";
      echo "";
      echo "  -right  will sort according to value on right side (useful bidixes)";
      echo "";
      echo "  -group <commaseparated list>  will group symbol categories together. For example:";
      echo "     -group n,n_symbol,adj,adv,vblex,vblex_symbol ";
      echo "     will sort all nouns, adj, adv and verbs together. Other entries will be sorted separately";
      echo "";
      echo "More information: http://wiki.apertium.org/wiki/Sort_a_dictionary";
      echo "";
   fi
}

#
#  process-xincludes
#
function process-xincludes() {
   if [ $nparams -ge 3 ]
   then
      java ${java_options} gather $2 $3 $4 $5 $6 $7 $8 $9
      echo "Dictionary: $3"
   else
      echo "Usage: apertium-dixtools process-xincludes <dic> <out.dix>";
      echo "";
      #echo "More information: ";
      #echo "";
   fi
}

#
#  get-bil-omegawiki
#
function get-bil-omegawiki() {
   if [ $nparams -ge 4 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
      echo "Dictionary: $4"
   else
      echo "Usage: apertium-dixtools get-bil-omegawiki <source-lang> <target-lang> <dic-out>"
      echo "";
      echo "More information: http://wiki.apertium.org/wiki/Getting_bilingual_dictionaries_from_OmegaWiki";
      echo "";
   fi
}

#
#  format-1line
#
function format-1line() {
   if [ $nparams -ge 3 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools format-1line [alignP alignR] <input-dic> <output-dic>"
      echo "       where alignP / alignR: column to align <p> and <r> entries. 0 = no indent."
      echo "";
      echo "Example: ' format-1line old.dix new.dix '   will give indent a la"
      echo '<e><p><l>dum<s n="cnjadv"/></l><r>whereas<s n="cnjadv"/></r></p></e>'
      echo "";
      echo "Example: ' format-1line 10 50 old.dix new.dix '   will give indent a la"
      echo '<e>       <p><l>dum<s n="cnjadv"/></l>            <r>whereas<s n="cnjadv"/></r></p></e>'
      echo "";
      echo "Example: ' format-1line 0 50 old.dix new.dix '   will give indent a la"
      echo '<e><p><l>dum<s n="cnjadv"/></l>                   <r>whereas<s n="cnjadv"/></r></p></e>'
      echo "";
      echo "Example: ' format-1line 10 0 old.dix new.dix '   will give indent a la"
      echo '<e>       <p><l>dum<s n="cnjadv"/></l><r>whereas<s n="cnjadv"/></r></p></e>'
      echo "";
      echo "More information: http://wiki.apertium.org/wiki/Format_dictionaries";
      echo "";
   fi
}

#
#  read-dic
#
function list() {
   if [ $nparams -ge 3 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools list <thing> <dic>"
      echo "where <thing> can be:"
      echo "   paradigms:   list of paradigms";
      echo "   lemmas:      list of lemmas";
      echo "   definitions: list of <sdef> elemenst";
      echo "   pairs:       list of pairs (for bilingual dictionaries)";
      echo "";
      echo "More information: http://wiki.apertium.org/wiki/Dictionary_reader";
      echo "";
   fi
}

function dic-reader() {
list $params;
}

#
#  equiv-paradigms
#
function equiv-paradigms() {
   if [ $nparams -ge 2 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools equiv-paradigms <dic> <out>"
      echo "";
      echo "More information: http://wiki.apertium.org/wiki/Equivalent_paradigms";
      echo "";
   fi
}

#
#  dix2trie
#
function dix2trie() {
   if [ $nparams -ge 3 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools dic2trie <dic> <lr|rl> [<out>]"
      echo "";
   fi
}

#
#  dix2cc
#
function dix2cc() {
   if [ $nparams -ge 3 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools dix2cc <dix> <cc>"
      echo "";
   fi
}

#
#  dix2tiny
#
function dix2tiny() {
   if [ $nparams -ge 5 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6
   else
      echo ""
      echo "Usage: apertium-dixtools dix2tiny <dix> <lang-pair> <lang-pair-text> <platform> [<filter>]"
      echo "Options:"
      echo "  platforms: j2me, palm, all"
      echo "Example:"
      echo "  apertium-dixtools dix2tiny apertium-es-ca.es-ca.dix es-ca Spanish-Catalan j2me [filter-es-ca.xml]"
      echo ""
   fi
}

#
#  apertiumizer
#
function apertiumize() {
   if [ $nparams -ge 2 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools apertiumize <txt> <out>"
      echo "";
   fi
}

#
#  filter
#
function filter() {
   if [ $nparams -ge 2 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools filter <dicA> <dicB>"
      echo "";
   fi
}



#
#  convert-mf
#
function convert-mf() {
   if [ $nparams -ge 3 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools convert-mf <morph> <bil> <out>"
      echo "";
   fi
}

#
#  add-same-gender
#
function add-same-gender() {
   if [ $nparams -ge 3 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools add-same-gender <morph> <bil> <out>"
      echo "";
   fi
}

#
#  prepare-dic
#
function prepare-dic() {
   if [ $nparams -ge 2 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools prepare-dic <bil> <missing-entries>>"
      echo "";
      #echo "More information: http://wiki.apertium.org/wiki/Equivalent_paradigms";
      #echo "";
   fi
}

#
#  complete-translation
#
function complete-translation() {
   if [ $nparams -ge 3 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools complete-translation <bil> <src-dot> <trans-dot>"
      echo "";
   fi
}

#
#  misc
#
function misc() {
   if [ $nparams -ge 4 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools misc <dic1> <dic2> <dic3> <dic4>"
      echo "";
   fi
}

#
#  format
#
function format() {
   if [ $nparams -ge 2 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools format <input-dic> <output-dic>"
      echo "See Generic options and http://wiki.apertium.org/wiki/Format_dictionaries";
      echo "";
      echo "Example ";
   fi
}

function cat() {
format $params;
}

#
#  fix
#
function fix() {
   if [ $nparams -ge 2 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools fix <input-dic> <output-dic>"
      echo "";
   fi
}

function speling() {
   if [ $nparams -ge 3 ]
   then
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
   else
      echo "Usage: apertium-dixtools speling <speling> <dic-out>"
      echo "";
   fi
}


function grep() {
 	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
}

#
#  show_help
#
function show_help() {
   echo ""
   echo "Usage: apertium-dixtools [task] [generic options] [task parameters] ..."
   echo "  Tasks:"
   echo "    autorestrict: automatically adds restrictions on a bidix so no ambiguity exists"
   echo "    autoconcord: automatically makes gender, number etc in bidix concord with the monodices"
   echo "    cross:              cross 2 language pairs (using linguistic res. XML file)"
   echo "    cross-param:        cross 2 language pairs (using command line parameters)"
  #echo "    merge-bil:          merges two bilingual dictionaries (bidix)"
   echo "    merge-morph:        merges two morphological dictionaries (monodix)"
   echo "    equiv-paradigms:    finds equivalent paradigms and updates references"
   echo "    list:               lists entries in a dictionary"
   echo "    grep:               makes grep-like regexp search to filter a dictionary"
   echo "    dix2trie:           create a Trie from an existing bilingual dictionary"
   echo "    dix2tiny:           create data for mobile platforms (j2me, palm) from bidix"
  #echo "    process-xincludes:  processes and expands all xincludes in the dictionary"
   echo "    reverse-bil:        reverses a bilingual dictionary"
   echo "    sort:               sorts (and groups by category) a dictionary"
   echo "    format:             formats a dictionary (according to Generic Options)"
   echo "    fix:                fix a dictionary (remove duplicates, convert spaces)"
   echo "  For help on a task, invoke it without parameters"
   echo ""
   echo "  Generic options:  (mostly for tasks that outputs dix files)"
   echo "    -debug              print extra debugging information"
   echo "    -useTabs            use tabs (instead of default 2 spaces) when indenting"
   echo "    -noProcComments     don't add processing comments (telling what was done)"
   echo "    -noHeader           don't put header comment with a summary in the top"
   echo "    -stripEmptyLines    removes empty lines (originating from original file)"
   echo "    -alignBidix         align a bidix (<p> or <i> at col 10, <r> at col 55)"
   echo "    -alignMonodix       align a monodix (pardef 10, 30, other entries 25, 45)"
   echo "    -align [[E] P R]    custom align (default <p>/<i> at col 10, <r> at col 55)"
   echo "    -alignpardef [[E] P R] paradigm alignment (if differ from general align)"
   echo "    -noalign            old, noncompact XML-ish output  (one tag per line, lots of indents)"
   echo ""
   echo "  If no -align option is specified, the alignment is autodetected"
   echo ""
   echo "  Use - as file name for piping (read/write .dix files on standard input/output)"
   echo ""
   echo "More info: http://wiki.apertium.org/wiki/Apertium-dixtools"
   echo ""
   exit 127
}

function help() {
show_help;
}

function show_help2() {
   	java ${java_options} help $0 $1 $2 $3 $4 $5 $6 $7 $8 $9
}

function profilecollect() {
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
}

function profilecreate() {
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
}

function profileresult() {
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
}

function autorestrict() {
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
}

function autoconcord() {
   	java ${java_options} $task $2 $3 $4 $5 $6 $7 $8 $9
}


task=$1
nparams="$#"
params="$@"
if [ "$#" == 0 ]; then
   show_help
else
   $task $params
fi
